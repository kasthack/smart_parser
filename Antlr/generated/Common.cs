//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sokirko/smart_parser/Antlr/src/Common.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Common : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOATING=2, OWN_TYPE=3, DOLYA_WORD=4, COMMA=5, OT=6, FRACTION_UNICODE=7, 
		FRACTION_ASCII=8, SQUARE_METER=9, HECTARE=10, REALTY_TYPE=11, COUNTRY=12;
	public const int
		RULE_realty_id = 0, RULE_square_value_without_spaces = 1, RULE_square_value_with_spaces = 2, 
		RULE_square_value = 3, RULE_own_type = 4, RULE_realty_share = 5, RULE_square = 6, 
		RULE_realty_type = 7, RULE_country = 8;
	public static readonly string[] ruleNames = {
		"realty_id", "square_value_without_spaces", "square_value_with_spaces", 
		"square_value", "own_type", "realty_share", "square", "realty_type", "country"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOATING", "OWN_TYPE", "DOLYA_WORD", "COMMA", "OT", "FRACTION_UNICODE", 
		"FRACTION_ASCII", "SQUARE_METER", "HECTARE", "REALTY_TYPE", "COUNTRY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Common.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Common() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Common(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Common(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Realty_idContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(Common.INT, 0); }
		public Realty_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterRealty_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitRealty_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_idContext realty_id() {
		Realty_idContext _localctx = new Realty_idContext(Context, State);
		EnterRule(_localctx, 0, RULE_realty_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; _localctx._INT = Match(INT);
			State = 19;
			if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) > 6000000)) throw new FailedPredicateException(this, "$INT.int > 6000000");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_value_without_spacesContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode FLOATING() { return GetToken(Common.FLOATING, 0); }
		public ITerminalNode INT() { return GetToken(Common.INT, 0); }
		public Square_value_without_spacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value_without_spaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterSquare_value_without_spaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitSquare_value_without_spaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value_without_spaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_value_without_spacesContext square_value_without_spaces() {
		Square_value_without_spacesContext _localctx = new Square_value_without_spacesContext(Context, State);
		EnterRule(_localctx, 2, RULE_square_value_without_spaces);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOATING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; Match(FLOATING);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; _localctx._INT = Match(INT);
				State = 23;
				if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 6000000)) throw new FailedPredicateException(this, "$INT.int < 6000000");
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_value_with_spacesContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode[] INT() { return GetTokens(Common.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(Common.INT, i);
		}
		public ITerminalNode FLOATING() { return GetToken(Common.FLOATING, 0); }
		public Square_value_with_spacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value_with_spaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterSquare_value_with_spaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitSquare_value_with_spaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value_with_spaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_value_with_spacesContext square_value_with_spaces() {
		Square_value_with_spacesContext _localctx = new Square_value_with_spacesContext(Context, State);
		EnterRule(_localctx, 4, RULE_square_value_with_spaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; _localctx._INT = Match(INT);
			State = 28;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 27; _localctx._INT = Match(INT);
				}
				break;
			}
			State = 30;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOATING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 31;
			if (!((_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 1000)) throw new FailedPredicateException(this, "$INT.int < 1000");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Square_valueContext : ParserRuleContext {
		public Square_value_without_spacesContext square_value_without_spaces() {
			return GetRuleContext<Square_value_without_spacesContext>(0);
		}
		public Square_value_with_spacesContext square_value_with_spaces() {
			return GetRuleContext<Square_value_with_spacesContext>(0);
		}
		public Square_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterSquare_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitSquare_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Square_valueContext square_value() {
		Square_valueContext _localctx = new Square_valueContext(Context, State);
		EnterRule(_localctx, 6, RULE_square_value);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; square_value_without_spaces();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; square_value_with_spaces();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Own_typeContext : ParserRuleContext {
		public ITerminalNode OWN_TYPE() { return GetToken(Common.OWN_TYPE, 0); }
		public Realty_shareContext realty_share() {
			return GetRuleContext<Realty_shareContext>(0);
		}
		public ITerminalNode[] DOLYA_WORD() { return GetTokens(Common.DOLYA_WORD); }
		public ITerminalNode DOLYA_WORD(int i) {
			return GetToken(Common.DOLYA_WORD, i);
		}
		public ITerminalNode COMMA() { return GetToken(Common.COMMA, 0); }
		public ITerminalNode OT() { return GetToken(Common.OT, 0); }
		public Own_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_own_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterOwn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitOwn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Own_typeContext own_type() {
		Own_typeContext _localctx = new Own_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_own_type);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 37; Match(OWN_TYPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 38; Match(OWN_TYPE);
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 39; Match(DOLYA_WORD);
					}
				}

				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 42; Match(COMMA);
					}
				}

				State = 45; realty_share();
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOLYA_WORD) {
					{
					State = 46; Match(DOLYA_WORD);
					}
				}

				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OT) {
					{
					State = 49; Match(OT);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_shareContext : ParserRuleContext {
		public ITerminalNode FRACTION_UNICODE() { return GetToken(Common.FRACTION_UNICODE, 0); }
		public ITerminalNode FRACTION_ASCII() { return GetToken(Common.FRACTION_ASCII, 0); }
		public Realty_shareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_share; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterRealty_share(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitRealty_share(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_share(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_shareContext realty_share() {
		Realty_shareContext _localctx = new Realty_shareContext(Context, State);
		EnterRule(_localctx, 10, RULE_realty_share);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.LA(1);
			if ( !(_la==FRACTION_UNICODE || _la==FRACTION_ASCII) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareContext : ParserRuleContext {
		public Square_valueContext square_value() {
			return GetRuleContext<Square_valueContext>(0);
		}
		public ITerminalNode SQUARE_METER() { return GetToken(Common.SQUARE_METER, 0); }
		public ITerminalNode HECTARE() { return GetToken(Common.HECTARE, 0); }
		public SquareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_square; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterSquare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitSquare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareContext square() {
		SquareContext _localctx = new SquareContext(Context, State);
		EnterRule(_localctx, 12, RULE_square);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; square_value();
			State = 57;
			_la = TokenStream.LA(1);
			if ( !(_la==SQUARE_METER || _la==HECTARE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Realty_typeContext : ParserRuleContext {
		public ITerminalNode REALTY_TYPE() { return GetToken(Common.REALTY_TYPE, 0); }
		public Realty_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realty_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterRealty_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitRealty_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRealty_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Realty_typeContext realty_type() {
		Realty_typeContext _localctx = new Realty_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_realty_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(REALTY_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountryContext : ParserRuleContext {
		public ITerminalNode COUNTRY() { return GetToken(Common.COUNTRY, 0); }
		public CountryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_country; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.EnterCountry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICommonListener typedListener = listener as ICommonListener;
			if (typedListener != null) typedListener.ExitCountry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICommonVisitor<TResult> typedVisitor = visitor as ICommonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountryContext country() {
		CountryContext _localctx = new CountryContext(Context, State);
		EnterRule(_localctx, 16, RULE_country);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(COUNTRY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

    public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) => ruleIndex switch
    {
        0 => realty_id_sempred((Realty_idContext)_localctx, predIndex),
        1 => square_value_without_spaces_sempred((Square_value_without_spacesContext)_localctx, predIndex),
        2 => square_value_with_spaces_sempred((Square_value_with_spacesContext)_localctx, predIndex),
        _ => true,
    };
    private bool realty_id_sempred(Realty_idContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) > 6000000;
		}
		return true;
	}
	private bool square_value_without_spaces_sempred(Square_value_without_spacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 6000000;
		}
		return true;
	}
	private bool square_value_with_spaces_sempred(Square_value_with_spacesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx._INT!=null?int.Parse(_localctx._INT.Text):0) < 1000;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '\x42', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1B', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x1F', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '&', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '+', '\n', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '.', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x32', 
		'\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x35', '\n', '\x6', '\x5', '\x6', 
		'\x37', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x2', '\x5', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', 
		'\t', '\n', '\x3', '\x2', '\v', '\f', '\x2', '@', '\x2', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\b', '%', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\xE', ':', '\x3', '\x2', '\x2', '\x2', '\x10', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '?', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x15', '\a', '\x3', '\x2', '\x2', '\x15', '\x16', '\x6', '\x2', '\x2', 
		'\x3', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1B', '\a', 
		'\x4', '\x2', '\x2', '\x18', '\x19', '\a', '\x3', '\x2', '\x2', '\x19', 
		'\x1B', '\x6', '\x3', '\x3', '\x3', '\x1A', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', '\x3', '\x2', '\x2', '\x1D', 
		'\x1F', '\a', '\x3', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '!', '\t', '\x2', '\x2', '\x2', '!', '\"', '\x6', 
		'\x4', '\x4', '\x3', '\"', '\a', '\x3', '\x2', '\x2', '\x2', '#', '&', 
		'\x5', '\x4', '\x3', '\x2', '$', '&', '\x5', '\x6', '\x4', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', '\t', '\x3', '\x2', '\x2', '\x2', '\'', '\x37', '\a', '\x5', '\x2', 
		'\x2', '(', '*', '\a', '\x5', '\x2', '\x2', ')', '+', '\a', '\x6', '\x2', 
		'\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', 
		'\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\a', '\x2', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x5', '\f', 
		'\a', '\x2', '\x30', '\x32', '\a', '\x6', '\x2', '\x2', '\x31', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\a', '\b', 
		'\x2', '\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\'', '\x3', '\x2', '\x2', '\x2', '\x36', '(', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\v', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\t', 
		'\x3', '\x2', '\x2', '\x39', '\r', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x5', '\b', '\x5', '\x2', ';', '<', '\t', '\x4', '\x2', '\x2', '<', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\r', '\x2', '\x2', '>', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\xE', '\x2', '\x2', '@', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\n', '\x1A', '\x1E', '%', '*', '-', 
		'\x31', '\x34', '\x36',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
