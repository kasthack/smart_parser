using System;using System.Collections.Generic;using System.Globalization;using System.IO;using System.Reflection;using Newtonsoft.Json;using Newtonsoft.Json.Schema;using Newtonsoft.Json.Linq;using TI.Declarator.ParserCommon;namespace TI.Declarator.JsonSerialization{    public class DecimalJsonConverter : JsonConverter    {        public DecimalJsonConverter(params Type[] types)        {        }        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)        {            var t = JToken.FromObject(value);            if (t.Type != JTokenType.Object)            {                var d = (decimal)t;                writer.WriteValue(d);            }            else            {                var o = (JObject)t;                o.WriteTo(writer);            }        }        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) => throw new NotImplementedException("Unnecessary because CanRead is false. The type will skip the converter.");        public override bool CanRead => false;

        public override bool CanConvert(Type objectType) => objectType == typeof(decimal);    }    public class RealEstateValidator : JsonValidator    {        public override void Validate(JToken value, JsonValidatorContext context)        {        }
        public override bool CanValidate(JSchema schema) => true;    }    public enum SmartParserJsonFormatEnum    {        Official,        Disclosures,    }    public static class DeclarationSerializer    {        private static readonly CultureInfo DefaultCulture = CultureInfo.InvariantCulture;        private static readonly CultureInfo RussianCulture = CultureInfo.CreateSpecificCulture("ru-ru");        private const string SchemaSource = "import-schema-dicts.json";        private static readonly JSchema Schema;        private static readonly JSchemaReaderSettings SchemaSettings;        public static SmartParserJsonFormatEnum SmartParserJsonFormat = SmartParserJsonFormatEnum.Official;        static DeclarationSerializer()        {            SchemaSettings = new JSchemaReaderSettings            {                Validators = new List<JsonValidator> { new RealEstateValidator() },            };            var executableLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);            var fullPath = Path.Combine(executableLocation, SchemaSource);            Schema = JSchema.Parse(File.ReadAllText(fullPath), SchemaSettings);        }        public static string Serialize(Declaration declaration)        {            string comment = null;            var result = Serialize(declaration, ref comment);            return result;        }        public static string Serialize(Declaration declaration, bool validate)        {            string comments = null;            var jsonString = Serialize(declaration, ref comments);            return validate && comments != null ? throw new Exception("Could not validate JSON output: " + comments) : jsonString;        }        public static JObject SerializeDocumentProperties(DeclarationProperties props)        {            var jProps = new JObject();            AddNotNullProp(jProps, "sheet_title", props.SheetTitle);            jProps.Add(new JProperty("year", props.Year));            if (SmartParserJsonFormat == SmartParserJsonFormatEnum.Official)            {                AddNotNullProp(jProps, "sheet_number", props.SheetNumber);            }
            AddNotNullProp(jProps, "documentfile_id", props.DocumentFileId);            AddNotNullProp(jProps, "archive_file", props.ArchiveFileName);            if (props.IgnoreThousandMultipler)            {                AddNotNullProp(jProps, "ignore_1000_multiplier", "true");            }
            return jProps;        }        public static string Serialize(Declaration declaration, ref string comment, bool validate = true)        {            var jServants = new JArray();            var storeSheetNumbersInSections = SmartParserJsonFormat == SmartParserJsonFormatEnum.Disclosures && declaration.NotFirstSheetProperties.Count > 0;            foreach (var servant in declaration.PublicServants)            {                jServants.Add(Serialize(servant, declaration.Properties, storeSheetNumbersInSections));            }            var jDocumentProp = SerializeDocumentProperties(declaration.Properties);            var JDeclaration = new JObject(new JProperty("persons", jServants));            if (SmartParserJsonFormat == SmartParserJsonFormatEnum.Disclosures)            {                var jSheetProps = new JArray
                {
                    jDocumentProp,
                };                foreach (var p in declaration.NotFirstSheetProperties)                {                    jSheetProps.Add(SerializeDocumentProperties(p));                }
                JDeclaration.Add(new JProperty("document_sheet_props", jSheetProps));                JDeclaration.Add(new JProperty("json_version", SmartParserJsonFormat.ToString()));            }            else            {                JDeclaration.Add(new JProperty("document", jDocumentProp));                if (!ColumnOrdering.SearchForFioColumnOnly)                {                    Validate(JDeclaration, out comment);                }                if (validate && !comment.IsNullOrWhiteSpace())                {                    throw new Exception("JSON output is not valid: " + comment);                }            }
            var json = JsonConvert.SerializeObject(JDeclaration, Formatting.Indented, new DecimalJsonConverter());            json = json.Replace("\r", string.Empty);            return json;        }        private static JObject Serialize(PublicServant servant, DeclarationProperties declarationProperties, bool storeSheetNumbersInSections)        {            var jServ = new JObject(                GetPersonalData(servant),                GetYear(declarationProperties),                GetIncomes(servant),                GetRealEstateProperties(servant),                GetVehicles(servant));            AddNotNullProp(jServ, "person_index", servant.Index);            AddNotNullProp(jServ, "document_position", servant.document_position);            if (storeSheetNumbersInSections)            {                AddNotNullProp(jServ, "sheet_number", servant.sheet_index);            }
            return jServ;        }        private static JProperty GetPersonalData(PublicServant servant)        {            var personProp = new JObject
            {
                new JProperty("name_raw", servant.NameRaw),
                new JProperty("role", servant.Occupation),
            };            AddNotNullProp(personProp, "department", servant.Department);            return new JProperty("person", personProp);        }        private static JProperty GetYear(DeclarationProperties declarationInfo) => declarationInfo.Year.HasValue ? new JProperty("year", declarationInfo.Year.Value) : new JProperty("year", null);        private static JProperty GetIncomes(PublicServant servant)        {            var jIncomes = new JArray();            if (servant.DeclaredYearlyIncome.HasValue)            {                var jIncomeProp = new JObject
                {
                    new JProperty("size", servant.DeclaredYearlyIncome),
                };                if (servant.DeclaredYearlyIncomeRaw.Length > 0)
                {
                    jIncomeProp.Add(new JProperty("size_raw", servant.DeclaredYearlyIncomeRaw));
                }

                jIncomeProp.Add(new JProperty("relative", null));                jIncomes.Add(jIncomeProp);            }            foreach (var relative in servant.Relatives)            {                var income = relative.DeclaredYearlyIncome;                if ((income.HasValue && income > 0.0m) || (relative.DeclaredYearlyIncomeRaw.Length > 0))                {                    var jIncomeProp = new JObject
                    {
                        new JProperty("size", income),
                    };                    if (relative.DeclaredYearlyIncomeRaw.Length > 0)
                    {
                        jIncomeProp.Add(new JProperty("size_raw", relative.DeclaredYearlyIncomeRaw));
                    }

                    jIncomeProp.Add(new JProperty("relative", GetRelationshipName(relative.RelationType)));                    AddNotNullProp(jIncomeProp, "relative_index", relative.PersonIndex);                    jIncomes.Add(jIncomeProp);                }            }            var res = new JProperty("incomes", jIncomes);            return res;        }        private static void AddNotNullProp(JObject jobj, string prop, object val)        {            if (val != null)            {                jobj.Add(new JProperty(prop, val));            }        }        private static JObject GetRealEstate(RealEstateProperty prop, string relationshipName = null, int? relative_index = null)        {            var jRealEstate = new JObject
            {
                // "text" - "Полная строка наименования недвижимости, которая была в оригинальном документе (сырое значение)",
                new JProperty("text", prop.Text),
                new JProperty("square", prop.square),
                new JProperty("relative", relationshipName),
            };            AddNotNullProp(jRealEstate, "relative_index", relative_index);            jRealEstate.Add(new JProperty("own_type_by_column", prop.own_type_by_column));            AddNotNullProp(jRealEstate, "square_raw", prop.square_raw);            AddNotNullProp(jRealEstate, "country_raw", prop.country_raw);            AddNotNullProp(jRealEstate, "type_raw", prop.type_raw);            AddNotNullProp(jRealEstate, "own_type_raw", prop.own_type_raw);            return jRealEstate;        }        private static JProperty GetRealEstateProperties(PublicServant servant)        {            var jRealEstate = new JArray();            foreach (var prop in servant.RealEstateProperties)            {                jRealEstate.Add(GetRealEstate(prop));            }            foreach (var rel in servant.Relatives)            {                foreach (var prop in rel.RealEstateProperties)                {                    jRealEstate.Add(GetRealEstate(prop, GetRelationshipName(rel.RelationType)));                }            }            var res = new JProperty("real_estates", jRealEstate);            return res;        }        private static JProperty GetVehicles(PublicServant servant)        {            var jVehicles = new JArray();            foreach (var vehicleInfo in servant.Vehicles)            {                var jVehicle = new JObject
                {
                    new JProperty("text", vehicleInfo.Text),
                    new JProperty("relative", null),
                };                AddNotNullProp(jVehicle, "type_raw", vehicleInfo.Type);                AddNotNullProp(jVehicle, "model", vehicleInfo.Model);                jVehicles.Add(jVehicle);            }            foreach (var rel in servant.Relatives)            {                foreach (var vehicleInfo in rel.Vehicles)                {                    var jVehicle = new JObject
                    {
                        new JProperty("text", vehicleInfo.Text),
                        new JProperty("relative", GetRelationshipName(rel.RelationType)),
                    };                    AddNotNullProp(jVehicle, "relative_index", rel.PersonIndex);                    AddNotNullProp(jVehicle, "type_raw", vehicleInfo.Type);                    jVehicles.Add(jVehicle);                }            }            var res = new JProperty("vehicles", jVehicles);            return res;        }        private static bool Validate<T>(T jServants, out string message)        {            IList<string> comments = new List<string>();            var stringWriter = new StringWriter();            var writer = new JsonTextWriter(stringWriter);            var validatingWriter = new JSchemaValidatingWriter(writer)
            {
                Schema = Schema,
            };            var serializer = new JsonSerializer();            var messages = new List<string>();            SchemaValidationEventHandler handler =                (object sender, SchemaValidationEventArgs e) =>
                {                    if (e.Message.StartsWith("Value null is not defined in enum"))
                    {
                        return;
                    }

                    messages.Add(e.Message);                };            validatingWriter.ValidationEventHandler += handler;            serializer.Serialize(validatingWriter, jServants);            var res = messages.Count == 0;            message = string.Join(" ", messages);            return res;        }        private static string GetRelationshipName(RelationType rt) => rt switch
        {
            RelationType.Spouse => "Супруг(а)",
            RelationType.Child => "Ребенок",
            RelationType.Other => "Иное",
            _ => throw new ArgumentOutOfRangeException(nameof(rt), $"Unsupported relationship type: {rt}"),
        };    }}